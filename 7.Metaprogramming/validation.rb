# frozen_string_literal: true

# Accessors module provides a set of methods to mix in dynamic methods into other classes

# Содержит метод класса validate.
# Этот метод принимает в качестве параметров имя проверяемого атрибута, а также тип валидации и
# при необходимости дополнительные параметры.
# Возможные типы валидаций:
#   - presence: требует, чтобы значение атрибута было не nil и не пустой строкой.
#     Пример использования: validate :name, :presence
#   - format (при этом отдельным параметром задается регулярное выражение для формата).
#     Требует соответствия значения атрибута заданному
#     регулярному выражению.
#     Пример:  validate :number, :format, /A-Z{0,3}/
#   - type (третий параметр - класс атрибута). Требует соответствия значения атрибута заданному классу.
#     Пример: validate :station, :type, RailwayStation

# Содержит инстанс-метод validate!, который запускает все проверки (валидации), указанные в классе через
# метод класса validate.
# В случае ошибки валидации выбрасывает исключение с сообщением о том, какая именно валидация не прошла
# Содержит инстанс-метод valid? который возвращает true, если все проверки валидации прошли успешно и false,
# если есть ошибки валидации.
# К любому атрибуту можно применить несколько разных валидаторов, например:
# 1) validate :name, :presence
# 2) validate :name, :format, /A-Z/
# 3) validate :name, :type, String
# 4) Все указанные валидаторы должны применяться к атрибуту
# 5) Допустимо, что модуль не будет работать с наследниками.

module Validation
  def attr_accessor_with_history(*args); end

  def strong_attr_accessor(attr_name, target_class); end
end
